name: Publish
on:
  schedule:
    # - cron: '*/5 * * * *'
    - cron: "0 6 * * *" # Nightly, run at 06:00 UTC
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v2.0
jobs:
  build:
    if: >
      github.repository_owner == 'bartificer'
      || startsWith(github.ref, 'refs/heads/ci/test/')
      || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release_info.outputs.version }}
      tag: ${{ steps.release_info.outputs.tag }}
      date: ${{ steps.release_info.outputs.date }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Activity check
        shell: bash
        run: |
          # check if we need to build
          D=86400 # 24 hours in seconds

          lastcommit="$(curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/commits | jq -r '[.[] | select (.commit.message != "Updating docs") ][0].commit.author.date')"
          timestamp=$(date -u -d "$lastcommit" +%s)
          days=$(( ( $(date -u +%s) - $timestamp ) / $D ))
          worktodo=1
          echo "lastcommit: $lastcommit"
          echo "timestamp: $timestamp"
          echo "days: $days"
          if [[ $days -gt 0 && $GITHUB_EVENT_NAME == 'schedule' ]]; then
            echo "nothing to do, last 'human' commit was $days days ago"
            worktodo=0
          fi
          echo ::set-env name=GHA_WORK_TO_DO::$worktodo
          echo "worktodo: $worktodo"

      - name: Setup Ruby
        if: env.GHA_WORK_TO_DO == 1
        uses: actions/setup-ruby@v1
        with:
          ruby-version: "2.7"

      - name: Checkout
        if: env.GHA_WORK_TO_DO == 1
        uses: actions/checkout@v2

      - id: release_info
        name: Get release information
        run: python3 ci/release-info.py "$GITHUB_EVENT_NAME"

      - if: ${{ steps.release_info.outputs.release_type == 'nightly' }} && env.GHA_WORK_TO_DO == 1
        name: Delete existing nightly releases
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          git ls-remote --tags --refs origin 'refs/tags/nightly*' |
          cut -f 2 |
          while read ref; do
            hub release delete ${ref#refs/tags/}
            git push --delete origin $ref
          done

      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v2

      - name: Run bundle install
        if: env.GHA_WORK_TO_DO == 1
        run: |
          gem install bundler
          bundle install

      - name: Publish the book
        if: env.GHA_WORK_TO_DO == 1
        run: bundle exec rake

      - name: Commit changes
        if: env.GHA_WORK_TO_DO == 1
        uses: EndBug/add-and-commit@v4
        with:
          message: "Updating docs"
          add: "docs"

      - name: Upload binaries to release
        if: env.GHA_WORK_TO_DO == 1
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: output/ttt*
          tag: ${{ steps.release_info.outputs.tag }}
          overwrite: true
          file_glob: true
